/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.External;
import dk.sdu.mmmi.mdsd.math.ExternalUse;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Par;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.Program;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    final MathExp math = program.getMathExp();
    String _name = program.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.generateProgramCode(program));
  }
  
  public CharSequence generateProgramCode(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.append("public class ");
    String _name = program.getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<VarBinding> _variables = program.getMathExp().getVariables();
      for(final VarBinding variable : _variables) {
        _builder.append("\t");
        CharSequence _generateVariableInstantions = this.generateVariableInstantions(variable);
        _builder.append(_generateVariableInstantions, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      int _size = program.getExternal().size();
      boolean _notEquals = (_size != 0);
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("private External external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t\t\t\t  ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("public ");
        String _name_1 = program.getName();
        _builder.append(_name_1, "\t");
        _builder.append("(External external) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("public ");
        String _name_2 = program.getName();
        _builder.append(_name_2, "\t");
        _builder.append("() {}");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      EList<VarBinding> _variables_1 = program.getMathExp().getVariables();
      for(final VarBinding variable_1 : _variables_1) {
        CharSequence _generateVariableCode = this.generateVariableCode(variable_1, variable_1.getName());
        _builder.append(_generateVariableCode);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    {
      int _size_1 = program.getExternal().size();
      boolean _notEquals_1 = (_size_1 != 0);
      if (_notEquals_1) {
        _builder.append("\t");
        _builder.append("public interface External {");
        _builder.newLine();
        {
          EList<External> _external = program.getExternal();
          for(final External external : _external) {
            CharSequence _generateExternalCode = this.generateExternalCode(external);
            _builder.append(_generateExternalCode);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateExternalCode(final External external) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("int ");
    String _name = external.getName();
    _builder.append(_name);
    _builder.append("(");
    {
      String _argumentLeft = external.getArgumentLeft();
      boolean _tripleNotEquals = (_argumentLeft != null);
      if (_tripleNotEquals) {
        String _argumentLeft_1 = external.getArgumentLeft();
        _builder.append(_argumentLeft_1);
        _builder.append(" n");
        {
          EList<String> _argumentsRight = external.getArgumentsRight();
          for(final String argument : _argumentsRight) {
            _builder.append(",");
            _builder.append(argument);
            _builder.append(" m");
          }
        }
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final VarBinding binding, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isTypeLetBinding = this.getIsTypeLetBinding(binding.getExpression());
      if (_isTypeLetBinding) {
        CharSequence _generateVariableCode = this.generateVariableCode(binding.getExpression(), binding.getName());
        _builder.append(_generateVariableCode);
        _builder.newLineIfNotEmpty();
      } else {
        String _name = binding.getName();
        _builder.append(_name);
        _builder.append(" = ");
        CharSequence _generateVariableCode_1 = this.generateVariableCode(binding.getExpression(), binding.getName());
        _builder.append(_generateVariableCode_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public boolean getIsTypeLetBinding(final Expression expression) {
    return (expression instanceof LetBinding);
  }
  
  protected CharSequence _generateVariableCode(final MathNumber exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = exp.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final Plus exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateVariableCode = this.generateVariableCode(exp.getLeft(), name);
    _builder.append(_generateVariableCode);
    _builder.append(" + ");
    CharSequence _generateVariableCode_1 = this.generateVariableCode(exp.getRight(), name);
    _builder.append(_generateVariableCode_1);
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final Minus exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateVariableCode = this.generateVariableCode(exp.getLeft(), name);
    _builder.append(_generateVariableCode);
    _builder.append(" - ");
    CharSequence _generateVariableCode_1 = this.generateVariableCode(exp.getRight(), name);
    _builder.append(_generateVariableCode_1);
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final Mult exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateVariableCode = this.generateVariableCode(exp.getLeft(), name);
    _builder.append(_generateVariableCode);
    _builder.append(" * ");
    CharSequence _generateVariableCode_1 = this.generateVariableCode(exp.getRight(), name);
    _builder.append(_generateVariableCode_1);
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final Div exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _generateVariableCode = this.generateVariableCode(exp.getLeft(), name);
    _builder.append(_generateVariableCode);
    _builder.append(" / ");
    CharSequence _generateVariableCode_1 = this.generateVariableCode(exp.getRight(), name);
    _builder.append(_generateVariableCode_1);
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final Par exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    CharSequence _generateVariableCode = this.generateVariableCode(exp.getExp(), name);
    _builder.append(_generateVariableCode);
    _builder.append(")");
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final VariableUse exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = exp.getRef().getName();
    _builder.append(_name);
    return _builder;
  }
  
  protected CharSequence _generateVariableCode(final LetBinding exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("int ");
    String _name = exp.getName();
    _builder.append(_name, "\t");
    _builder.append(" = ");
    {
      boolean _thisCheck = this.thisCheck(exp.getBinding());
      if (_thisCheck) {
        _builder.append("this.");
      }
    }
    CharSequence _generateVariableCode = this.generateVariableCode(exp.getBinding(), name);
    _builder.append(_generateVariableCode, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(name, "\t");
    _builder.append(" = ");
    CharSequence _generateVariableCode_1 = this.generateVariableCode(exp.getBody(), exp.getName());
    _builder.append(_generateVariableCode_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public boolean thisCheck(final Expression expression) {
    if ((expression instanceof Plus)) {
      Plus exp = ((Plus) expression);
      Expression _left = exp.getLeft();
      return (_left instanceof VariableUse);
    }
    if ((expression instanceof Minus)) {
      Minus exp_1 = ((Minus) expression);
      Expression _left_1 = exp_1.getLeft();
      return (_left_1 instanceof VariableUse);
    }
    if ((expression instanceof Div)) {
      Div exp_2 = ((Div) expression);
      Expression _left_2 = exp_2.getLeft();
      return (_left_2 instanceof VariableUse);
    }
    if ((expression instanceof Mult)) {
      Mult exp_3 = ((Mult) expression);
      Expression _left_3 = exp_3.getLeft();
      return (_left_3 instanceof VariableUse);
    }
    return false;
  }
  
  protected CharSequence _generateVariableCode(final ExternalUse exp, final String name) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("this.external.");
    String _name = exp.getName();
    _builder.append(_name);
    _builder.append("(");
    {
      Expression _argumentLeft = exp.getArgumentLeft();
      boolean _tripleNotEquals = (_argumentLeft != null);
      if (_tripleNotEquals) {
        CharSequence _generateVariableCode = this.generateVariableCode(exp.getArgumentLeft(), name);
        _builder.append(_generateVariableCode);
        {
          EList<Expression> _argumentsRight = exp.getArgumentsRight();
          for(final Expression arg : _argumentsRight) {
            _builder.append(",");
            CharSequence _generateVariableCode_1 = this.generateVariableCode(arg, name);
            _builder.append(_generateVariableCode_1);
          }
        }
      }
    }
    _builder.append(")");
    return _builder;
  }
  
  public CharSequence generateVariableInstantions(final VarBinding binding) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public int ");
    String _name = binding.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public static Map<String, Integer> compute(final MathExp math) {
    Map<String, Integer> _xblockexpression = null;
    {
      HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
      MathGenerator.variables = _hashMap;
      EList<VarBinding> _variables = math.getVariables();
      for (final VarBinding varBinding : _variables) {
        MathGenerator.computeExpression(varBinding);
      }
      _xblockexpression = MathGenerator.variables;
    }
    return _xblockexpression;
  }
  
  protected static int _computeExpression(final VarBinding binding) {
    MathGenerator.variables.put(binding.getName(), Integer.valueOf(MathGenerator.computeExpression(binding.getExpression())));
    return (MathGenerator.variables.get(binding.getName())).intValue();
  }
  
  protected static int _computeExpression(final MathNumber exp) {
    return exp.getValue();
  }
  
  protected static int _computeExpression(final Plus exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression + _computeExpression_1);
  }
  
  protected static int _computeExpression(final Minus exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression - _computeExpression_1);
  }
  
  protected static int _computeExpression(final Mult exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression * _computeExpression_1);
  }
  
  protected static int _computeExpression(final Div exp) {
    int _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    int _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_computeExpression / _computeExpression_1);
  }
  
  protected static int _computeExpression(final LetBinding exp) {
    return MathGenerator.computeExpression(exp.getBody());
  }
  
  protected static int _computeExpression(final VariableUse exp) {
    return MathGenerator.computeBinding(exp.getRef());
  }
  
  protected static int _computeBinding(final VarBinding binding) {
    Integer _xblockexpression = null;
    {
      boolean _containsKey = MathGenerator.variables.containsKey(binding.getName());
      boolean _not = (!_containsKey);
      if (_not) {
        MathGenerator.computeExpression(binding);
      }
      _xblockexpression = MathGenerator.variables.get(binding.getName());
    }
    return (_xblockexpression).intValue();
  }
  
  protected static int _computeBinding(final LetBinding binding) {
    return MathGenerator.computeExpression(binding.getBinding());
  }
  
  public CharSequence generateVariableCode(final EObject exp, final String name) {
    if (exp instanceof Div) {
      return _generateVariableCode((Div)exp, name);
    } else if (exp instanceof ExternalUse) {
      return _generateVariableCode((ExternalUse)exp, name);
    } else if (exp instanceof LetBinding) {
      return _generateVariableCode((LetBinding)exp, name);
    } else if (exp instanceof MathNumber) {
      return _generateVariableCode((MathNumber)exp, name);
    } else if (exp instanceof Minus) {
      return _generateVariableCode((Minus)exp, name);
    } else if (exp instanceof Mult) {
      return _generateVariableCode((Mult)exp, name);
    } else if (exp instanceof Par) {
      return _generateVariableCode((Par)exp, name);
    } else if (exp instanceof Plus) {
      return _generateVariableCode((Plus)exp, name);
    } else if (exp instanceof VarBinding) {
      return _generateVariableCode((VarBinding)exp, name);
    } else if (exp instanceof VariableUse) {
      return _generateVariableCode((VariableUse)exp, name);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp, name).toString());
    }
  }
  
  public static int computeExpression(final EObject exp) {
    if (exp instanceof Div) {
      return _computeExpression((Div)exp);
    } else if (exp instanceof LetBinding) {
      return _computeExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp);
    } else if (exp instanceof VarBinding) {
      return _computeExpression((VarBinding)exp);
    } else if (exp instanceof VariableUse) {
      return _computeExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public static int computeBinding(final Binding binding) {
    if (binding instanceof LetBinding) {
      return _computeBinding((LetBinding)binding);
    } else if (binding instanceof VarBinding) {
      return _computeBinding((VarBinding)binding);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(binding).toString());
    }
  }
}
